<?php

/**
 * @file
 * Implements iATS Payments API for use in Drupal Commerce Card on File.
 */

define('COMMERCE_IATS_CARDONFILE_TRANSACTIONS_CRON', 'commerce_iats_cardonfile_transactions_cron');

/**
 * Implements hook_entity_info().
 */
function commerce_iats_cardonfile_entity_info() {
  $data = array();

  $data['commerce_iats_cardonfile_recurring'] = array(
    'label' => t('Commerce iATS Card on File Recurring'),
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIController',
    'base table' => 'commerce_iats_cardonfile_recurring',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'card_id',
    ),
  );

  return $data;
}

/**
 * Implements hook_entity_property_info_alter().
 */
function commerce_iats_cardonfile_entity_property_info_alter(&$info) {
  $info['commerce_cardonfile']['properties']['recurring'] = array(
    'label' => t('Recurring'),
    'description' => t('Boolean indicating an iATS recurring payment card.'),
    'type' => 'boolean',
    'setter callback' => 'entity_property_verbatim_set',
    'schema field' => 'recurring',
  );
}

/**
 * Implements hook_commerce_payment_method_info_alter().
 *
 * Overrides payment methods for use with Card on File.
 */
function commerce_iats_cardonfile_commerce_payment_method_info_alter(&$payment_methods) {
  $credit_card_callbacks = commerce_iats_cardonfile_payment_method_callbacks('credit_card');

  $payment_methods['iats_credit_card']['base'] = 'commerce_iats_cardonfile_credit_card';
  $payment_methods['iats_credit_card']['file'] = 'modules/commerce_iats_cardonfile/includes/commerce_iats_cardonfile.credit_card.inc';
  $payment_methods['iats_credit_card']['cardonfile'] = $credit_card_callbacks;

  $payment_methods['iats_credit_card_customer_code']['base'] = 'commerce_iats_cardonfile_credit_card_customer_code';
  $payment_methods['iats_credit_card_customer_code']['file'] = 'modules/commerce_iats_cardonfile/includes/commerce_iats_cardonfile.credit_card_customer_code.inc';
  $payment_methods['iats_credit_card_customer_code']['cardonfile'] = $credit_card_callbacks;

  $ach_eft_callbacks = commerce_iats_cardonfile_payment_method_callbacks('ach_eft');

  $payment_methods['iats_ach_eft']['base'] = 'commerce_iats_cardonfile_ach_eft';
  $payment_methods['iats_ach_eft']['file'] = 'modules/commerce_iats_cardonfile/includes/commerce_iats_cardonfile.ach_eft.inc';
  $payment_methods['iats_ach_eft']['cardonfile'] = $ach_eft_callbacks;

  $payment_methods['iats_ach_eft_customer_code']['base'] = 'commerce_iats_cardonfile_ach_eft_customer_code';
  $payment_methods['iats_ach_eft_customer_code']['file'] = 'modules/commerce_iats_cardonfile/includes/commerce_iats_cardonfile.ach_eft_customer_code.inc';
  $payment_methods['iats_ach_eft_customer_code']['cardonfile'] = $ach_eft_callbacks;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_iats_cardonfile_form_commerce_payment_order_transaction_add_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form_state['values']['payment_method'])) {
    $parts = explode('|', $form_state['values']['payment_method']);

    if ($parts[0] == 'iats_credit_card_customer_code') {
      // Hide "Amount" and "Currency Code" fields when creating a customer code.
      $form['payment_terminal']['amount']['#access'] = FALSE;
      $form['payment_terminal']['currency_code']['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alters checkout form to allow for recurring payments, when enabled.
 *
 * Alters card on file options on form to account for bank account
 * details being used in place of credit card details.
 */
function commerce_iats_cardonfile_form_commerce_checkout_form_review_alter(&$form, &$form_state, $form_id) {
  if (isset($form_state['values']['commerce_payment']['payment_method'])) {
    $payment_method_id = $form_state['values']['commerce_payment']['payment_method'];
  }
  elseif (isset($form['commerce_payment']['payment_method'])) {
    $payment_method_id = $form['commerce_payment']['payment_method']['#default_value'];
  }

  if (!isset($payment_method_id)) {
    // Unable to alter the form without a valid payment method ID.
    return;
  }

  $payment_method = $form_state['order']->payment_methods[$payment_method_id];
  if (isset($payment_method['settings']['allow_recurring'])
    && $payment_method['settings']['allow_recurring'] == 1) {

    // Hide stored cards. Cannot used stored cards to create a new recurring payment.
    $form['commerce_payment']['payment_details']['cardonfile'] = array(
      '#type' => 'value',
      '#value' => 'new',
    );
    $form['commerce_payment']['payment_details']['credit_card']['#access'] = TRUE;

    // Add recurring payment form fields.
    $form['commerce_payment']['payment_details']['recurring'] = array(
      '#tree' => TRUE,
    );

    $schedule_type = '';
    if (isset($form_state['values']['commerce_payment']['payment_details']['recurring']['schedule_type'])) {
      $schedule_type = $form_state['values']['commerce_payment']['payment_details']['recurring']['schedule_type'];
    }

    $form['commerce_payment']['payment_details']['recurring']['amount'] = array(
      '#type' => 'textfield',
      '#title' => t('Amount'),
      '#required' => TRUE,
    );

    $form['commerce_payment']['payment_details']['recurring']['schedule_type'] = array(
      '#type' => 'select',
      '#title' => t('Payment schedule type'),
      '#required' => TRUE,
      '#options' => commerce_iats_cardonfile_recurring_schedule_types(),
      '#default_value' => '',
      '#ajax' => array(
        'callback' => 'commerce_iats_cardonfile_recurring_schedule_type_callback',
        'method' => 'replace',
        'wrapper' => 'payment-date-wrapper',
      ),
    );

    if (!empty($schedule_type)) {
      $payment_dates = commerce_iats_cardonfile_recurring_schedule_dates($schedule_type);

      $form['commerce_payment']['payment_details']['recurring']['schedule_date'] = array(
        '#type' => 'select',
        '#title' => t('Payment date'),
        '#options' => $payment_dates,
        '#default_value' => 1,
      );
    }
    else {
      $form['commerce_payment']['payment_details']['recurring']['schedule_date'] = array();
    }

    $form['commerce_payment']['payment_details']['recurring']['schedule_date']['#prefix'] = '<div id="payment-date-wrapper">';
    $form['commerce_payment']['payment_details']['recurring']['schedule_date']['#suffix'] = '</div>';

    // Disable Card on File options. If recurring is enabled, card is stored.
    $form['commerce_payment']['payment_details']['credit_card']['cardonfile_store']['#access'] = FALSE;
    $form['commerce_payment']['payment_details']['cardonfile_instance_default']['#access'] = FALSE;
  }

  // In case of ACH/EFT payment, display bank account form fields.
  if (substr($payment_method_id, 0, 12) == 'iats_ach_eft') {
    $form['commerce_payment']['payment_details']['bank_account']['cardonfile_store']
      = $form['commerce_payment']['payment_details']['credit_card']['cardonfile_store'];

    unset($form['commerce_payment']['payment_details']['credit_card']['cardonfile_store']);

    $form['commerce_payment']['payment_details']['cardonfile']['#title'] = t('Select a stored bank account.');
    $form['commerce_payment']['payment_details']['cardonfile']['#options']['new'] = t('Use a different bank account.');
    $form['commerce_payment']['payment_details']['cardonfile_instance_default']['#title']
      = t('Set as your default bank account.');
    $form['commerce_payment']['payment_details']['bank_account']['cardonfile_store']['#title']
      = t('Store this bank account on file for future use.');

    if (isset($form['commerce_payment']['payment_details']['credit_card']['#access'])) {
      $form['commerce_payment']['payment_details']['bank_account']['#access']
        = $form['commerce_payment']['payment_details']['credit_card']['#access'];
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_iats_cardonfile_form_commerce_cardonfile_card_form_alter(&$form, &$form_state, $form_id) {
  if ($form_state['card_data']->recurring) {
    $form['credit_card']['cardonfile_instance_default']['#access'] = FALSE;

    if ($form_state['op'] == 'update') {
      $recurring = commerce_iats_cardonfile_recurring_load($form_state['card_data']->card_id);
      $form_state['recurring'] = $recurring;

      $form['credit_card']['recurring'] = array();
      $form['credit_card']['recurring']['amount'] = array(
        '#type' => 'textfield',
        '#title' => t('Recurring payment amount'),
        '#size' => 6,
        '#required' => TRUE,
        '#default_value' => $recurring->amount,
      );

      $form['credit_card']['recurring']['schedule_type'] = array(
        '#type' => 'select',
        '#title' => t('Recurring payment schedule type'),
        '#required' => TRUE,
        '#options' => commerce_iats_cardonfile_recurring_schedule_types(),
        '#default_value' => $recurring->schedule_type,
      );

      if (isset($form_state['values']['credit_card']['recurring']['schedule_type'])) {
        $schedule_type = $form_state['values']['credit_card']['recurring']['schedule_type'];
      }
      else {
        $schedule_type = $recurring->schedule_type;
      }

      $payment_dates = commerce_iats_cardonfile_recurring_schedule_dates($schedule_type);

      $form['credit_card']['recurring']['schedule_date'] = array(
        '#type' => 'select',
        '#title' => t('Recurring payment date'),
        '#options' => $payment_dates,
        '#default_value' => $recurring->schedule_date,
      );

      $form['#submit'][] = 'commerce_iats_cardonfile_recurring_form_submit';
    }
  }
}

/**
 * Submit handler for updating Card on File used for recurring payments.
 *
 * TODO: Form validation.
 */
function commerce_iats_cardonfile_recurring_form_submit($form, &$form_state) {
  $recurring = $form_state['recurring'];

  $recurring->amount = $form_state['credit_card']['recurring']['amount'];
  $recurring->schedule_type = $form_state['credit_card']['recurring']['schedule_type'];
  $recurring->schedule_date = $form_state['credit_card']['recurring']['schedule_date'];

  commerce_iats_cardonfile_recurring_save($recurring);
}

/**
 * Implements hook_form_alter().
 *
 * Includes payment method update / delete callback methods.
 */
function commerce_iats_cardonfile_form_alter(&$form, &$form_state, $form_id) {
  if ((substr($form_id, -20) == 'cardonfile_card_form')
    || (substr($form_id, -22) == 'cardonfile_delete_form')) {
    $default_payment_method = TRUE;
    if (isset($form_state['card_data'])) {
      if (substr($form_state['card_data']->payment_method, 0, 12) == 'iats_ach_eft') {
        module_load_include('inc', 'commerce_iats_cardonfile', 'includes/commerce_iats_cardonfile.ach_eft');
        $default_payment_method = FALSE;
      }
    }

    if ($default_payment_method) {
      module_load_include('inc', 'commerce_iats_cardonfile', 'includes/commerce_iats_cardonfile.credit_card');
    }
  }
}

/**
 * Implements hook_menu_alter().
 */
function commerce_iats_cardonfile_menu_alter(&$items) {
  $items['user/%user/cards/%commerce_cardonfile']['title callback'] = 'commerce_iats_cardonfile_card_title';
  $items['user/%user/cards/%commerce_cardonfile']['page callback'] = 'commerce_iats_cardonfile_card_view';
  $items['user/%user/cards/%commerce_cardonfile']['file'] = 'includes/commerce_iats_cardonfile.pages.inc';
  $items['user/%user/cards/%commerce_cardonfile']['module'] = 'commerce_iats_cardonfile';

  $items['user/%user/cards/%commerce_cardonfile/view']['module'] = 'commerce_iats_cardonfile';
  $items['user/%user/cards/%commerce_cardonfile/view']['access callback'] = 'commerce_iats_cardonfile_view_access';

  $items['user/%user/cards/%commerce_cardonfile/edit']['page callback'] = 'commerce_iats_cardonfile_card_form_page';
  $items['user/%user/cards/%commerce_cardonfile/edit']['file'] = 'includes/commerce_iats_cardonfile.pages.inc';
  $items['user/%user/cards/%commerce_cardonfile/edit']['module'] = 'commerce_iats_cardonfile';

  $items['user/%user/cards/%commerce_cardonfile/delete']['page arguments'][0] = 'commerce_iats_cardonfile_delete_form';
  $items['user/%user/cards/%commerce_cardonfile/delete']['file'] = 'includes/commerce_iats_cardonfile.pages.inc';
  $items['user/%user/cards/%commerce_cardonfile/delete']['module'] = 'commerce_iats_cardonfile';
}

/**
 * Implements hook_cron_queue_info().
 */
function commerce_iats_cardonfile_cron_queue_info() {
  $queues[COMMERCE_IATS_CARDONFILE_TRANSACTIONS_CRON] = array(
    'worker callback' => 'commerce_iats_cardonfile_process_queued_transaction',
    'time' => 60,
  );
  return $queues;
}

/**
 * Implements hook_cron().
 *
 * Retrieves daily transaction reports from iATS.
 * Updates recurring payment transactions.
 */
function commerce_iats_cardonfile_cron() {
  commerce_iats_cardonfile_populate_transaction_queue();
}

/**
 * Populates a queue of payment transactions from transaction reports.
 *
 * Used to update Commerce iATS with transactions processed outside of
 * the module, e.g. recurring payments.
 */
function commerce_iats_cardonfile_populate_transaction_queue() {
  $queue = DrupalQueue::get(COMMERCE_IATS_CARDONFILE_TRANSACTIONS_CRON);
  $queue->createQueue();

  // TODO: Account for custom payment method rule name.
  $payment_method = commerce_payment_method_instance_load('iats_credit_card_customer_code|commerce_payment_iats_credit_card_customer_code');

  if (empty($payment_method['settings'])) {
    // Payment method has not been set up. Cannot retrieve transaction reports.
    return;
  }

  // Get the API service.
  $iats = commerce_iats_get_service('ReportLink', $payment_method);

  $request = array(
    'date' => mktime(0, 0, 0, date('n'), date('j'), date('Y')),
  );

  // Get credit card transactions.
  $credit_card_response = $iats->getCreditCardJournal($request);

  if (is_array($credit_card_response)) {
    foreach ($credit_card_response as $transaction) {
      $queue->createItem($transaction);
    }
  }

  // Get ACH/EFT transactions.
  $ach_eft_response = $iats->getACHEFTJournal($request);

  if (is_array($ach_eft_response)) {
    foreach ($ach_eft_response as $transaction) {
      $queue->createItem($transaction);
    }
  }
}

/**
 * Processes a transaction retrieved from the iATS Payments Reports API.
 *
 * Used to create Commerce records of recurring payment transactions
 * processed by iATS Payments.
 * Looks up the initial recurring payment transaction and adds a new
 * transaction to the original order.
 *
 * @param array $data
 *   The transaction data from the iATS Payments Reports API.
 *
 * @return bool
 *   TRUE if a new transaction was created.
 */
function commerce_iats_cardonfile_process_queued_transaction($data) {
  $transaction_type = $data['TNTYP'];
  $customer_code = $data['CST']['CSTC'];
  $transaction_id = $data['TNID'];
  $amount = $data['AMT'];
  $result_code = $data['RST'];

  $transaction_status = (substr($result_code, 0, 2) == 'OK') ?
    COMMERCE_PAYMENT_STATUS_SUCCESS : COMMERCE_PAYMENT_STATUS_FAILURE;

  if ($transaction_type == 'CreditCard') {
    $payment_method = 'iats_credit_card';
    $instance_id = 'iats_credit_card|commerce_payment_iats_credit_card';
  }
  elseif ($transaction_type == 'ACHEFT') {
    $payment_method = 'iats_ach_eft';
    $instance_id = 'iats_ach_eft|commerce_payment_iats_ach_eft';
  }
  else {
    // Unknown transaction type.
    // TODO: Log error message.
    return FALSE;
  }

  $transactions_table = $GLOBALS['db_prefix'] . 'commerce_payment_transaction';

  $remote_id = $transaction_id . '|' . $customer_code;
  $existing_transaction = db_select($transactions_table, 't')
    ->fields('t')
    ->condition('remote_id', $remote_id, '=')
    ->execute()
    ->fetchAssoc();

  if (!empty($existing_transaction)) {
    watchdog('commerce_iats', 'Already processed transaction @remote_id',
      array(
        '@remote_id' => $remote_id,
      ),
      WATCHDOG_NOTICE);
    return FALSE;
  }

  $initial_remote_id = COMMERCE_IATS_RECURRING_PAYMENT_TRANSACTION_ID . '|' . $customer_code;
  $initial_transaction = db_select($transactions_table, 't')
    ->fields('t')
    ->condition('remote_id', $initial_remote_id, '=')
    ->execute()
    ->fetchAssoc();

  if (!empty($initial_transaction)) {
    $transaction = new stdClass();
    $transaction->uid = $initial_transaction['uid'];
    $transaction->order_id = $initial_transaction['order_id'];
    $transaction->payment_method = $payment_method;
    $transaction->instance_id = $instance_id;
    $transaction->remote_id = $remote_id;
    $transaction->message = $result_code;
    $transaction->message_variables = array();
    $transaction->amount = $amount;
    $transaction->currency_code = '';
    $transaction->status = $transaction_status;
    $transaction->remote_status = '';
    $transaction->payload = array();

    $result = commerce_payment_transaction_save($transaction);

    return ($result == SAVED_NEW);
  }
  return FALSE;
}

/**
 * Gets base fields settings form fields for customer code based payment methods.
 *
 * @param array $settings
 *   Form field default values array.
 *
 * @return array
 *   Base fields for settings form.
 */
function commerce_iats_cardonfile_customer_code_settings_form_base(array $settings = NULL) {
  $form = commerce_iats_credit_card_settings_form_base($settings);

  $form['allow_recurring'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow recurring payments through iATS Payments'),
    '#default_value' => (isset($settings['allow_recurring'])) ?
    $settings['allow_recurring'] : '',
  );

  return $form;
}

/**
 * Creates a new card on file record for the user making this transaction.
 *
 * @param object $order
 *   The order processed during this transaction.
 * @param array $payment_method
 *   The payment method used during this transaction.
 * @param array $card_data
 *   Array of credit card data.
 * @param array $recurring_data
 *   Array of recurring payment data.
 * @param string $customer_code
 *   The iATS customer code returned by the iATS API following a transaction
 *   that created a new customer code.
 * @param string $card_type
 *   The credit card type used during this transaction.
 *   ie. visa, mc
 *
 * @return bool
 *   TRUE or FALSE indicating success of saving card on file.
 */
function commerce_iats_cardonfile_create_cardonfile($order, array $payment_method, array $card_data, array $recurring_data, $customer_code, $card_type) {
  // Build a payment details array for the credit card.
  $payment_details = array(
    'cardNumber' => $card_data['number'],
    'expirationDate' => $card_data['exp_year'] . '-' . $card_data['exp_month'],
  );

  if (isset($pane_values['credit_card']['code'])) {
    $payment_details['cardCode'] = $pane_values['credit_card']['code'];
  }

  $card_on_file = commerce_cardonfile_new();
  $card_on_file->uid = $order->uid;
  $card_on_file->payment_method = $payment_method['method_id'];
  $card_on_file->instance_id = $payment_method['instance_id'];
  $card_on_file->remote_id = $customer_code;
  $card_on_file->card_type = !empty($card_type) ? $card_type : 'card';
  $card_on_file->card_name = !empty($billing_address['name_line']) ? $billing_address['name_line'] : '';
  $card_on_file->card_number = substr($card_data['number'], -4);
  $card_on_file->card_exp_month = $card_data['exp_month'];
  $card_on_file->card_exp_year = $card_data['exp_year'];
  $card_on_file->status = 1;
  $card_on_file->instance_default = $card_data['default'];

  if (!empty($recurring_data) && !empty($recurring_data['amount'])) {
    $card_on_file->recurring = true;
    // A recurring payment card cannot be used as the user's default card.
    $card_on_file->instance_default = false;
  }

  // Save and log the creation of the new card on file.
  if (commerce_cardonfile_save($card_on_file)) {
    watchdog('commerce_iats',
      'iATS Customer Code @customer_code created and saved to user @uid.',
      array(
        '@customer_code' => (string) $customer_code,
        '@uid' => $order->uid,
      )
    );

    if ($card_on_file->recurring) {
      $card_on_file_recurring = commerce_iats_cardonfile_recurring_new();
      $card_on_file_recurring->card_id = $card_on_file->card_id;
      $card_on_file_recurring->amount = $recurring_data['amount'];
      $card_on_file_recurring->schedule_type = $recurring_data['schedule_type'];
      $card_on_file_recurring->schedule_date = $recurring_data['schedule_date'];
      commerce_iats_cardonfile_recurring_save($card_on_file_recurring);
    }

    return TRUE;
  }
  else {
    watchdog('commerce_iats',
      'iATS Customer Code @customer_code could not be saved to user @uid.',
      array(
        '@customer_code' => (string) $customer_code,
        '@uid' => $order->uid,
      ),
      WATCHDOG_ERROR);

    return FALSE;
  }
}

/**
 * Returns an array of payment method callbacks, based in a payment method type.
 *
 * @param string $payment_method_type
 *   The payment method type to use in callback method names.
 *   Currently 'credit_card' or 'ach_eft'
 *
 * @return array
 *   Array of payment method callbacks.
 */
function commerce_iats_cardonfile_payment_method_callbacks($payment_method_type) {
  $card_on_file_callbacks = array(
    // Called when card is charged. Note: Only the Commerce Recurring module
    // calls this method automatically. When using just the Commerce module,
    // we call this method manually via a form submit handler.
    'charge callback' => 'commerce_iats_cardonfile_' . $payment_method_type . '_charge',
    // Called when card on file is updated.
    'update callback' => 'commerce_iats_cardonfile_' . $payment_method_type . '_update',
    // Called when card on file is deleted.
    'delete callback' => 'commerce_iats_cardonfile_' . $payment_method_type . '_delete',
  );

  return $card_on_file_callbacks;
}

/**
 * Form callback when selecting a schedule type.
 */
function commerce_iats_cardonfile_recurring_schedule_type_callback($form, $form_state) {
  return $form['commerce_payment']['payment_details']['recurring']['schedule_date'];
}

/**
 * Returns an associative array of valid payment schedule types.
 *
 * @return array
 *   Array of recurring schedule types.
 */
function commerce_iats_cardonfile_recurring_schedule_types() {
  $types = array(
    '' => 'None',
    'Weekly' => 'Weekly',
    'Monthly' => 'Monthly',
    'Quarterly' => 'Quarterly',
    'Annually' => 'Annually',
  );
  return $types;
}

/**
 * Returns an associative array of valid payment schedule dates.
 *
 * @param string $payment_type
 *   The schedule type to return schedule dates for.
 *
 * @return array
 *   Array of schedule dates.
 */
function commerce_iats_cardonfile_recurring_schedule_dates($payment_type) {
  switch ($payment_type) {
    case 'Weekly':
      $payment_dates = array(
        1 => 'Monday',
        2 => 'Tuesday',
        3 => 'Wednesday',
        4 => 'Thursday',
        5 => 'Friday',
        6 => 'Saturday',
        7 => 'Sunday',
      );
      break;

    case 'Monthly':
      $payment_dates = array();
      for ($i = 1; $i <= 31; $i++) {
        $payment_dates[$i] = $i;
      }
      break;

    default:
      // Payment types that do not require schedule dates.
      $payment_dates = array(
        '' => $payment_type,
      );
  }
  return $payment_dates;
}

/**
 * Loads a Commerce iATS Card on File Recurring entity by ID.
 *
 * @param int $card_id
 *   The ID of the Card on File entity.
 *
 * @return Mixed
 *   Array containing the specified entity data or FALSE if not found.
 */
function commerce_iats_cardonfile_recurring_load($card_id) {
  return entity_load_single('commerce_iats_cardonfile_recurring', $card_id);
}

/**
 * Returns an initialized Commerce iATS Card on File Recurring entity.
 *
 * @param array $values
 *   Custom entity values to use, in addition to standard values.
 *
 * @return Mixed
 *   Instance of the entity or FALSE on failure.
 */
function commerce_iats_cardonfile_recurring_new(array $values = array()) {
  $values += array(
    'card_id' => NULL,
    'amount' => 0,
    'schedule_type' => '',
    'schedule_date' => '',
  );

  return entity_create('commerce_iats_cardonfile_recurring', $values);
}

/**
 * Saves a Commerce iATS Card on File Recurring entity.
 *
 * @param object $recurring_data
 *   A Commerce iATS Card on File Recurring entity instance.
 *
 * @return mixed
 *   Constants SAVED_NEW, SAVED_UPDATED or boolean FALSE on failure.
 */
function commerce_iats_cardonfile_recurring_save($recurring_data) {
  return entity_save('commerce_iats_cardonfile_recurring', $recurring_data);
}
