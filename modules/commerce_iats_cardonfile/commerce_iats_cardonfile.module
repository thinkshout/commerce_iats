<?php

/**
 * Implements hook_commerce_payment_method_info_alter().
 */
function commerce_iats_cardonfile_commerce_payment_method_info_alter(&$payment_methods) {
  $payment_methods['iats_credit_card']['cardonfile'] = array(
    // TODO: Document and write method.
    'charge callback' => 'commerce_iats_cardonfile_credit_card_charge',
    // Called when card on file is updated.
    // TODO: Write method.
    'update callback' => 'commerce_iats_cardonfile_credit_card_update',
    // Called when card on file is deleted.
    // TODO: Write method.
    'delete callback' => 'commerce_iats_cardonfile_credit_card_delete',
  );

  $payment_methods['iats_credit_card_customer_code'] = array(
    'base' => 'commerce_iats_credit_card_customer_code',
    'title' => t('iATS Webservice: Credit card customer code creation'),
    'short_title' => t('iATS Web Service'),
    'display_title' => t('Credit card customer code'),
    'description' => t('Integrates the iATS CustomerLink webservice for the creation of credit card customer codes.'),
    'file' => 'includes/commerce_iats_cardonfile.credit_card_customer_code.inc',
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_iats_cardonfile_form_commerce_payment_order_transaction_add_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form_state['values']['payment_method'])) {
    $parts = explode('|', $form_state['values']['payment_method']);

    if ($parts[0] == 'iats_credit_card_customer_code') {
      // Hide "Amount" and "Currency Code" fields when creating a customer code.
      $form['payment_terminal']['amount']['#access'] = FALSE;
      $form['payment_terminal']['currency_code']['#access'] = FALSE;
    }
    else if ($parts[0] == 'iats_credit_card_customer_code') {
      // Override form submit handler.
      $form['#submit'] = array('commerce_iats_cardonfile_credit_card_submit_form_submit');
    }
  }
}

function commerce_iats_cardonfile_credit_card_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  // Determine if the customer is using an exsting card on file.
  if ($payment_method['settings']['iats_customer_code']
    && !empty($pane_values['cardonfile'])
  ) {
    if ($pane_values['cardonfile'] === 'new') {
      // Create a new card on file record.
      $payment_data = $pane_values;

      commerce_iats_process_payment($payment_method, $payment_data, $order, $charge, 'commerce_iats_cardonfile_credit_card_create_and_charge');
    } else {
      // Get the card on file data.
      $card_data = commerce_cardonfile_load($pane_values['cardonfile']);

      // Fail now if it is no longer available or the card is inactive.
      if (empty($card_data) || $card_data->status == 0) {
        drupal_set_message(t('The requested card on file is no longer valid.'), 'error');
        return FALSE;
      }

      commerce_iats_process_payment($payment_method, $card_data, $order, $charge, 'commerce_iats_cardonfile_credit_card_charge');
    }
  }
}

function commerce_iats_cardonfile_credit_card_charge($payment_method, $card_data, $order, $charge = NULL) {

  // TODO: Populate request.
  $request = array();

  // Get the API service.
  $iats = commerce_iats_get_service('ProcessLink', $payment_method);
  if ($iats == NULL) {
    drupal_set_message(t('Unable to load iATS Payments library.'), 'error');
    return NULL;
  }

  // Log the request.
  if ($payment_method['settings']['log']['request'] === 'request') {
    commerce_iats_log_request($payment_method, $request);
  }

  $response = $iats->processCreditCardWithCustomerCode($request);

  return $response;
}

function commerce_iats_cardonfile_credit_card_create_and_charge($payment_method, $card_data, $order, $charge = NULL) {

  // TODO: Populate request.
  $request = array();

  // Get the API service.
  $iats = commerce_iats_get_service('ProcessLink', $payment_method);
  if ($iats == NULL) {
    drupal_set_message(t('Unable to load iATS Payments library.'), 'error');
    return NULL;
  }

  // Log the request.
  if ($payment_method['settings']['log']['request'] === 'request') {
    commerce_iats_log_request($payment_method, $request);
  }

  $response = $iats->createCustomerCodeAndProcessCreditCard($request);

  return $response;
}

function commerce_iats_cardonfile_credit_card_update($form, &$form_state, $payment_method, $card_data) {

}

function commerce_iats_cardonfile_credit_card_delete($form, &$form_state, $payment_method, $card_data) {

}

/**
 * Creates a new card on file record for the user making this transaction.
 *
 * @param object $order
 *  The order processed during this transaction.
 * @param array $payment_method
 *  The payment method used during this transaction.
 * @param array $pane_values
 *  The values from the submitted form.
 * @param string $customer_code
 *  The iATS customer code returned by the iATS API following a transaction
 *  that created a new customer code.
 * @param string $card_type
 *  The credit card type used during this transaction.
 *
 * @return bool
 *  TRUE or FALSE indicating success of saving card on file.
 */
function commerce_iats_cardonfile_create_credit_card($order, array $payment_method, array $pane_values, $customer_code, $card_type) {
  // Build a payment details array for the credit card.
  $payment_details = array(
    'cardNumber' => $pane_values['credit_card']['number'],
    'expirationDate' => $pane_values['credit_card']['exp_year'] . '-' . $pane_values['credit_card']['exp_month'],
  );

  if (isset($pane_values['credit_card']['code'])) {
    $payment_details['cardCode'] = $pane_values['credit_card']['code'];
  }

  $card_data = commerce_cardonfile_new();
  $card_data->uid = $order->uid;
  $card_data->payment_method = $payment_method['method_id'];
  $card_data->instance_id = $payment_method['instance_id'];
  $card_data->remote_id = $customer_code;
  $card_data->card_type = !empty($card_type) ? $card_type : 'card';
  $card_data->card_name = !empty($billing_address['name_line']) ? $billing_address['name_line'] : '';
  $card_data->card_number = substr($pane_values['credit_card']['number'], -4);
  $card_data->card_exp_month = $pane_values['credit_card']['exp_month'];
  $card_data->card_exp_year = $pane_values['credit_card']['exp_year'];
  $card_data->status = 1;

  // Save and log the creation of the new card on file.
  if (commerce_cardonfile_save($card_data)) {
    watchdog('commerce_iats',
      'iATS Customer Code @customer_code created and saved to user @uid.',
      array(
        '@customer_code' => (string) $customer_code,
        '@uid' => $order->uid,
      )
    );

    return TRUE;
  }
  else {
    watchdog('commerce_iats',
      'iATS Customer Code @customer_code could not be saved to user @uid.',
      array(
        '@customer_code' => (string) $customer_code,
        '@uid' => $order->uid,
      ),
      WATCHDOG_ERROR);

    return FALSE;
  }
}

/**
 * Helper method to get commerce_cardonfile entity from an iATS customer code.
 */
function commerce_iats_cardonfile_customer_code_load($customer_code) {
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'commerce_cardonfile')
    ->propertyCondition('remote_id', $customer_code)
    ->execute();

  if (isset($result['commerce_cardonfile'])) {
    return commerce_cardonfile_load(reset(array_keys($result['commerce_cardonfile'])));
  }
  else {
    return FALSE;
  }
}