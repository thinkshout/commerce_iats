<?php

/**
 * @file
 * Implements iATS payment services for use in Drupal Commerce.
 */

// TODO: Remove "soap" from method names.
// TODO: Make purpose of ProcessLink / CustomerLink clearer.
// TODO: Use CustomerLink for creating a credit card customer code without payment (CC validation.)
// TODO: Add request and response logging from commerce_iats_soap_api_request to other methods.

// TODO: Remove these where handled by wrapper.
// IATS transaction mode definitions:
define('IATS_TXN_MODE_PRODUCTION', 'production');
define('IATS_TXN_MODE_TEST', 'test');
define('IATS_TXN_NS', 'xmlns');
define('IATS_TXN_TRACE', TRUE);
define('IATS_TXN_SUCCESS', 'Success');
define('IATS_TXN_OK', 'OK');
define('IATS_NA_SERVER', 'www.iatspayments.com');
define('IATS_UK_SERVER', 'www.uk.iatspayments.com');
define('IATS_URL_PROCESSLINK','/NetGate/ProcessLink.asmx?WSDL');
define('IATS_URL_REPORTLINK','/NetGate/ReportLink.asmx?WDSL');
define('IATS_URL_CUSTOMERLINK','/NetGate/CustomerLink.asmx?WDSL');

/**
 * Implements hook_menu().
 */
function commerce_iats_menu() {
  $items = array();

  // Add a menu item for refunding transactions.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/iats-refund'] = array(
    'title' => 'Refund',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_iats_refund_form', 3, 5),
    'access callback' => 'commerce_iats_refund_access',
    'access arguments' => array(3, 5),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 2,
    'file' => 'includes/commerce_iats.admin.inc',
  );

  return $items;
}

/**
 * @todo: Refund functions belong in payment-specific include files.
 *
 * Determines access to the refund form for IATS credit card
 * transactions
 *
 * @param $order
 *   The order the transaction is on.
 * @param $transaction
 *   The payment transaction object to be refunded.
 *
 * @return
 *   TRUE or FALSE indicating refund access.
 */
function commerce_iats_refund_access($order, $transaction) {
  // Return FALSE if the transaction isn't for Authorize.Net AIM, doesn't have a
  // success status or has an amount of 0 or less.
  if ($transaction->payment_method != 'iats_soap_process' || $transaction->status != 'success' || $transaction->amount <= 0) {
    return FALSE;
  }

  // Return FALSE if it is more than 120 days past the original capture.
  if (time() - $transaction->created > 86400 * 120) {
    return FALSE;
  }

  // Allow access if the user can update this transaction.
  return commerce_payment_transaction_access('update', $transaction);
}

/**
 * Implements hook_commerce_payment_method_info().
 *
 * This module makes use of some of the methods of the iatsProcess link
 * implemented as individual payment methods using a common base
 */
function commerce_iats_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['iats_credit_card'] = array(
    'base' => 'commerce_iats_credit_card',
    'title' => t('IATS Webservice: ProcessLink'),
    'short_title' => t('IATS Web Service'),
    'display_title' => t('Credit card'),
    'description' => t('Integrates the IATS webservice: '),
    'cardonfile' => array(
      'charge callback' => 'commerce_iats_credit_card_cardonfile_charge',
      'update callback' => 'commerce_iats_credit_card_cardonfile_update', // TODO: Write method.
      'delete callback' => 'commerce_iats_credit_card_cardonfile_delete', // TODO: Write method.
    ),
  );

  return $payment_methods;
}

/**
 * Returns the default settings for the iATS Credit Card and ACH/EFT payment methods.
 */
function commerce_iats_default_settings() {
  return array(
    'agent_code' => '',
    'agent_password' => '',
    'transaction_mode' => IATS_TXN_MODE_TEST,
    'server' => IATS_NA_SERVER,
    'iats_customer_code' => FALSE,
    'log' => array('request' => '0', 'response' => '0'),
  );
}

/**
 * Populate a request with address information for use in a iATS API request.
 *
 * @param $request
 *   Request object
 * @param $type
 *   The type of address object to return, either 'billing' or 'shipping'.
 *   Billing addresses include an e-mail address and IP address in addition to
 *   the actual billing address.
 * @param $order
 *   The order object containing the address information via a referenced
 *   customer profile.
 * @param $field_name
 *   The name of the customer profile reference field that links the order to
 *   the proper customer profile where the address data will be retrieved from.
 *
 * @return
 *   An object representing the address of the requested type for use in a
 *   iATS API request.
 */
function commerce_iats_address($request, $type, $order, $field_name) {
  // Return if the specified profile field doesn't exist.
  if (empty($order->{$field_name})) {
    watchdog('commerce_iats', 'Missing address data for !field_name: !order', array('!field_name' => $field_name, '!order' => '<pre>' . check_plain(print_r($order, TRUE)) . '</pre>', WATCHDOG_DEBUG));
    return;
  }

  // Prepare the address data for use in the request address.
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $address_data = $order_wrapper->{$field_name}->commerce_customer_address->value();

  if (empty($address_data['first_name'])) {
    $name_parts = explode(' ', $address_data['name_line']);
    $address_data['first_name'] = array_shift($name_parts);
    $address_data['last_name'] = implode(' ', $name_parts);
  }

  // Add the basic address information to the request
  $request->firstName = $address_data['first_name'];
  $request->lastName = $address_data['last_name'];
  $request->address = $address_data['thoroughfare'];
  $request->city = $address_data['locality'];
  $request->state = $address_data['administrative_area'];
  $request->zipCode = $address_data['postal_code'];
  $request->country = $address_data['country'];
  if ($address_data['premise']) {
    $request->address .= ', '.$address_data['premise'];
  }

  return TRUE;
}

/**
 * Helper method to get commerce_cardonfile entity from an iATS customer code.
 */
function commerce_iats_cardonfile_customer_code_load($customer_code) {

  $return = array();
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'commerce_cardonfile')
    ->propertyCondition('remote_id', $customer_code);

  $result = $query->execute();

  if (isset($result['commerce_cardonfile'])) {
    return commerce_cardonfile_load(reset(array_keys($result['commerce_cardonfile'])));
  }
  else {
    return FALSE;
  }
}

/**
 * Payment method callback: settings form.
 */
function commerce_iats_soap_customerlink_settings_form($settings = NULL) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
  $settings += commerce_iats_default_settings();

  $form = array();

  $form['agent_code'] = array(
    '#type' => 'textfield',
    '#title' => t('Agent Code'),
    '#description' => t('This is the agent code used to login to the IATS website.'),
    '#default_value' => $settings['agent_code'],
    '#required' => TRUE,
  );
  $form['agent_password'] = array(
    '#type' => 'textfield',
    '#title' => t('Password'),
    '#description' => t('Enter the corresponding password for this agent code.'),
    '#default_value' => $settings['agent_password'],
    '#required' => TRUE,
  );
  $form['server'] = array(
    '#type' => 'radios',
    '#title' => t('Transaction server'),
    '#description' => t('Select the transaction server to use for processing payments.'),
    '#options' => array(
      IATS_NA_SERVER => t('US'),
      IATS_UK_SERVER => t('UK'),
    ),
    '#default_value' => $settings['server'],
  );
  $form['transaction_mode'] = array(
    '#type' => 'radios',
    '#title' => t('Transaction mode - NOT IMPLEMENTED'),
    '#description' => t('Adjust to live transactions when you are ready to start processing real payments.'),
    '#options' => array(
      IATS_TXN_MODE_PRODUCTION => t('Live transactions in the production environment'),
      IATS_TXN_MODE_TEST => t('Test transactions in the test environment'),
    ),
    '#default_value' => $settings['transaction_mode'],
  );
  $form['log'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Log the following messages for debugging'),
    '#options' => array(
      'request' => t('API request messages'),
      'response' => t('API response messages'),
    ),
    '#default_value' => $settings['log'],
  );

  $form['credit_card'] = array(
    '#type' => 'fieldset',
    '#title' => t('Credit card service settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['credit_card']['card_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Limit accepted credit cards to the following types'),
    '#description' => t('If none are checked, any credit card type will be accepted.'),
    '#options' => commerce_iats_credit_card_types(),
    '#default_value' => isset($settings['credit_card']['card_types']) ? $settings['credit_card']['card_types'] : array(),
  );
  return $form;
}

/**
 * Payment method callback: checkout form.
 */
function commerce_iats_soap_customerlink_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
  $fields = array();
  // Limit credit card types, since IATS has a limited selection.
  $card_types = array_diff(array_values($payment_method['settings']['credit_card']['card_types']), array(0));
  if (!empty($card_types)) {
    if ($card_types === array(0)) {
      $card_types = commerce_iats_credit_card_types();
    }
    $fields['type'] = $card_types;
  }

  $form = commerce_payment_credit_card_form($fields);
  return $form;
}

/**
 * @param $payment_method
 * @param $pane_form
 * @param $pane_values
 * @param $order
 * @param $charge
 */
function commerce_iats_soap_customerlink_submit_form_submit($payment_method, $pane_form, $pane_values, $order) {
  if ($response = commerce_iats_soap_api_customerlink_request($payment_method, $pane_values, $order)) {
    $result = $response->PROCESSRESULT->AUTHORIZATIONRESULT;


    $processresult = $response->PROCESSRESULT;
    if (strpos($processresult->AUTHORIZATIONRESULT, 'Error') !== FALSE) {

      drupal_set_message(t('There was an error processing this transaction: @error.',
        array('@error' => $processresult->AUTHORIZATIONRESULT))
        , 'error');
      return FALSE;
    }

    // Prepare a transaction object to log the API response.
    $transaction = commerce_payment_transaction_new('iats_soap_process', $order->order_id);
    $transaction->instance_id = $payment_method['instance_id'];

    $transaction->remote_id = $response->PROCESSRESULT->CUSTOMERCODE;
    $transaction->amount =0;
    // TODO: Check server type.
    $transaction->currency_code = 'USD';//$charge['currency_code'];
    $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;

    // Build a meaningful response message.
    $message = array(
      '<b>' . t('Customer code created.') . '</b>');

    $transaction->message = implode('<br />', $message);

    // Save the transaction information.
    commerce_payment_transaction_save($transaction);
  }

}
