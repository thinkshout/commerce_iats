<?php

/**
 * @file
 * Implements iATS Payments API for use in Drupal Commerce.
 */

// iATS response code definitions.
define('COMMERCE_IATS_TXN_OK', 'OK');

// iATS server ID definitions.
define('COMMERCE_IATS_NA_SERVER_ID', 'NA');
define('COMMERCE_IATS_UK_SERVER_ID', 'UK');

/**
 * Implements hook_libraries_info().
 */
function commerce_iats_libraries_info() {
  $libraries['iatspayments'] = array(
    'name' => 'iATS Payments API',
    'vendor url' => 'http://www.iatspayments.com/',
    'download url' => 'https://github.com/iATSPayments/PHP',
    'version' => '1.0',
    'path' => 'lib',
    'version arguments' => array(
      'file' => 'ProcessLink.php',
      // Version 1.0
      'pattern' => '/\iATS API version ((\d+)\.(\d+))/',
    ),
    'files' => array(
      'php' => array(
        'Core.php',
        'CustomerLink.php',
        'ProcessLink.php',
        'ReportLink.php',
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_menu().
 */
function commerce_iats_menu() {
  $items = array();

  // Add a menu item for refunding transactions.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/iats-credit-card-refund'] = array(
    'title' => 'Refund',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_iats_credit_card_refund_form', 3, 5),
    'access callback' => 'commerce_iats_credit_card_refund_access',
    'access arguments' => array(5),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 2,
    'file' => 'includes/commerce_iats.credit_card.admin.inc',
  );

  return $items;
}

/**
 * Determines access to the refund form for iATS credit card transactions.
 *
 * @param object $transaction
 *   The payment transaction object to be refunded.
 *
 * @return bool
 *   TRUE or FALSE indicating refund access.
 */
function commerce_iats_credit_card_refund_access($transaction) {
  if (($transaction->payment_method != 'iats_credit_card')
    || ($transaction->status != 'success')
    || ($transaction->amount <= 0)) {
    return FALSE;
  }

  // Return FALSE if it is more than 120 days past the original capture.
  if (time() - $transaction->created > 86400 * 120) {
    return FALSE;
  }

  // Allow access if the user can update this transaction.
  return commerce_payment_transaction_access('update', $transaction);
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_iats_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['iats_credit_card'] = array(
    'base' => 'commerce_iats_credit_card',
    'title' => t('iATS Webservice: Credit card payment'),
    'short_title' => t('iATS Credit card payment'),
    'display_title' => t('Credit card'),
    'description' => t('Integrates the iATS ProcessLink webservice for credit card payments.'),
    'file' => 'includes/commerce_iats.credit_card.inc',
    // TODO: I couldn't find any docs explaining this key?
    'cardonfile' => array(
      'update callback' => 'commerce_iats_credit_card_cardonfile_update', // TODO: Write method.
      'delete callback' => 'commerce_iats_credit_card_cardonfile_delete', // TODO: Write method.
    ),
  );

  $payment_methods['iats_credit_card_customer_code'] = array(
    'base' => 'commerce_iats_credit_card_customer_code',
    'title' => t('iATS Webservice: Credit card customer code creation'),
    'short_title' => t('iATS Web Service'),
    'display_title' => t('Credit card customer code'),
    'description' => t('Integrates the iATS CustomerLink webservice for the creation of credit card customer codes.'),
    'file' => 'includes/commerce_iats.credit_card_customer_code.inc',
  );

  return $payment_methods;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_iats_form_commerce_payment_order_transaction_add_form_alter(&$form, &$form_state, $form_id) {
  // Hides "Amount" and "Currency Code" fields when creating a customer code.
  if (isset($form_state['values']['payment_method'])) {
    $parts = explode('|', $form_state['values']['payment_method']);
    if ($parts[0] == 'iats_credit_card_customer_code') {
      $form['payment_terminal']['amount']['#access'] = FALSE;
      $form['payment_terminal']['currency_code']['#access'] = FALSE;
    }
  }
}

/**
 * Gets base fields settings form fields for credit card based payment methods.
 *
 * @param array $settings
 *   Form field default values array.
 *
 * @return array
 *   Base fields for settings form.
 */
function commerce_iats_credit_card_settings_form_base(array $settings = NULL) {
  $form = array();

  $form['agent_code'] = array(
    '#type' => 'textfield',
    '#title' => t('Agent Code'),
    '#description' => t('This is the agent code used to authenticate with the iATS website.'),
    '#default_value' => $settings['agent_code'],
    '#required' => TRUE,
  );
  $form['agent_password'] = array(
    '#type' => 'textfield',
    '#title' => t('Password'),
    '#description' => t('Enter the corresponding password for this agent code.'),
    '#default_value' => $settings['agent_password'],
    '#required' => TRUE,
  );
  $form['server'] = array(
    '#type' => 'radios',
    '#title' => t('Transaction Server'),
    '#description' => t('Select the transaction server to use for processing payments.'),
    '#options' => array(
      COMMERCE_IATS_NA_SERVER_ID => t('US'),
      COMMERCE_IATS_UK_SERVER_ID => t('UK'),
    ),
    '#default_value' => $settings['server'],
  );
  $form['log'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Log the following messages for debugging'),
    '#options' => array(
      'request' => t('API request messages'),
      'response' => t('API response messages'),
    ),
    '#default_value' => $settings['log'],
  );
  $form['credit_card'] = array(
    '#type' => 'fieldset',
    '#title' => t('Credit card service settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['credit_card']['card_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Limit accepted credit cards to the following types'),
    '#description' => t('If none are checked, any credit card type will be accepted.'),
    '#options' => commerce_iats_credit_card_types(),
    '#default_value' => isset($settings['credit_card']['card_types']) ? $settings['credit_card']['card_types'] : array(),
  );

  return $form;
}

/**
 * Returns the default settings for the iATS Credit Card and ACH/EFT payment methods.
 *
 * TODO: See https://github.com/thinkshout/commerce_iats/issues/2.
 */
function commerce_iats_default_settings() {
  return array(
    'agent_code' => '',
    'agent_password' => '',
    'server' => COMMERCE_IATS_NA_SERVER_ID,
    'iats_customer_code' => FALSE,
    'log' => array('request' => '0', 'response' => '0'),
    'invoice_prefix' => 'INVOICE-',
  );
}

/**
 * Populate a request with address information for use in a iATS API request.
 *
 * @param array $request
 *   Request array
 * @param object $order
 *   The order object containing the address information via a referenced
 *   customer profile.
 * @param string $field_name
 *   The name of the customer profile reference field that links the order to
 *   the proper customer profile where the address data will be retrieved from.
 *
 * @return mixed
 *   Updates pass by reference.
 */
function commerce_iats_address(array &$request, $order, $field_name) {
  // Return if the specified profile field doesn't exist.
  if (empty($order->{$field_name})) {
    watchdog('commerce_iats', 'Missing address data for @field_name: @order', array('@field_name' => $field_name, '@order' => '<pre>' . check_plain(print_r($order, TRUE)) . '</pre>', WATCHDOG_DEBUG));
    return;
  }

  // Prepare the address data for use in the request address.
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $address_data = $order_wrapper->{$field_name}->commerce_customer_address->value();

  // TODO: Explain me.
  if (empty($address_data['first_name'])) {
    $name_parts = explode(' ', $address_data['name_line']);
    $address_data['first_name'] = array_shift($name_parts);
    $address_data['last_name'] = implode(' ', $name_parts);
  }

  // Add the basic address information to the request.
  $request['firstName'] = $address_data['first_name'];
  $request['lastName'] = $address_data['last_name'];
  $request['address'] = $address_data['thoroughfare'];
  $request['city'] = $address_data['locality'];
  $request['state'] = $address_data['administrative_area'];
  $request['zipCode'] = $address_data['postal_code'];
  $request['country'] = $address_data['country'];
  if ($address_data['premise']) {
    $request['address'] .= ', ' . $address_data['premise'];
  }

  return TRUE;
}

/**
 * Helper method to get commerce_cardonfile entity from an iATS customer code.
 */
function commerce_iats_cardonfile_customer_code_load($customer_code) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'commerce_cardonfile')
    ->propertyCondition('remote_id', $customer_code);

  $result = $query->execute();

  if (isset($result['commerce_cardonfile'])) {
    return commerce_cardonfile_load(reset(array_keys($result['commerce_cardonfile'])));
  }
  else {
    return FALSE;
  }
}

/**
 * Replaces the standard function commerce_payment_credit_card_types() with custom types.
 *
 * @return array
 *   Array of credit card types.
 */
function commerce_iats_credit_card_types() {
  return array(
    'visa' => t('Visa'),
    'mastercard' => t('MasterCard'),
    'amex' => t('American Express'),
    'discover' => t('Discover Card'),
  );
}

/**
 * Converts a Commerce credit card type to  an iATS-compatible credit card type.
 *
 * @param string $type
 *    The Commerce credit card type.
 * @return string
 *    The iATS credit card type.
 */
function commerce_iats_credit_card_mop($type) {
  $mop = array(
    'visa' => 'VISA',
    'mastercard' => 'MC',
    'amex' => 'AMX',
    'discover' => 'DSC',
  );
  return $mop[$type];
}

/**
 * Creates a new card on file record for the user making this transaction.
 *
 * TODO: Describe parameters.
 *
 * @param object $order
 * @param array $payment_method
 * @param array $pane_values
 * @param string $customer_code
 * @param string $card_type
 *
 * @return NULL
 */
function commerce_iats_credit_card_save_card_on_file($order, array $payment_method, array $pane_values, $customer_code, $card_type) {
  // Build a payment details array for the credit card.
  $payment_details = array(
    'cardNumber' => $pane_values['credit_card']['number'],
    'expirationDate' => $pane_values['credit_card']['exp_year'] . '-' . $pane_values['credit_card']['exp_month'],
  );

  if (isset($pane_values['credit_card']['code'])) {
    $payment_details['cardCode'] = $pane_values['credit_card']['code'];
  }

  $card_data = commerce_cardonfile_new();
  $card_data->uid = $order->uid;
  $card_data->payment_method = $payment_method['method_id'];
  $card_data->instance_id = $payment_method['instance_id'];
  $card_data->remote_id = $customer_code;
  $card_data->card_type = !empty($card_type) ? $card_type : 'card';
  $card_data->card_name = !empty($billing_address['name_line']) ? $billing_address['name_line'] : '';
  $card_data->card_number = substr($pane_values['credit_card']['number'], -4);
  $card_data->card_exp_month = $pane_values['credit_card']['exp_month'];
  $card_data->card_exp_year = $pane_values['credit_card']['exp_year'];
  $card_data->status = 1;

  // Save and log the creation of the new card on file.
  commerce_cardonfile_save($card_data);
  watchdog('commerce_iats',
    'iATS Customer Code @customer_code created and saved to user @uid.',
    array(
      '@customer_code' => (string) $customer_code,
      '@uid' => $order->uid)
  );
}

/**
 * Logs an API request.
 *
 * @param array $payment_method
 * @param array $request
 */
function commerce_iats_log_request(array $payment_method, array $request) {
  if (isset($request['ccNum'])) {
    $request['ccNum'] = commerce_iats_mask_credit_card_number($request['ccNum']);
  }
  elseif (isset($request['creditCardNum'])) {
    $request['creditCardNum'] = commerce_iats_mask_credit_card_number($request['creditCardNum']);
  }

  if (isset($request['cvv2']) && !empty($request['cvv2'])) {
    $request['cvv2'] = str_repeat('X', strlen($request['cvv2']));
  }

  watchdog('commerce_iats', 'iATS API request to @method: @request',
    array(
      '@method' => $payment_method['short_title'],
      '@request' => '<pre>' . check_plain(print_r($request, TRUE)) . '</pre>',
    ),
    WATCHDOG_DEBUG);
}

/**
 * Logs an API response.
 *
 * @param array $payment_method
 * @param mixed $response
 *   Response array or error string.
 */
function commerce_iats_log_response(array $payment_method, $response) {
  watchdog('commerce_iats',
    'iATS API response from @method: @request',
    array(
      '@method' => $payment_method['short_title'],
      '@request' => '<pre>' . check_plain(print_r($response, TRUE)) . '</pre>',
    ),
    WATCHDOG_DEBUG);
}

/**
 * Masks all but the last four digits of a credit card number.
 *
 * @param string $credit_card_number
 *   Unmasked credit card number.
 *
 * @return string
 *   Masked credit card number.
 */
function commerce_iats_mask_credit_card_number($credit_card_number) {
  return str_repeat('X', strlen($credit_card_number) - 4) . substr($credit_card_number, -4);
}

/**
 * Gets an instance of the iATS Payments API ProcessLink service.
 *
 * @param array $payment_method
 * @return iATS\ProcessLink
 */
function commerce_iats_get_processlink_service(array $payment_method) {
  if (libraries_load('iatspayments')) {
    $service = new iATS\ProcessLink(
      $payment_method['settings']['agent_code'],
      $payment_method['settings']['agent_password'],
      $payment_method['settings']['server']
    );

    return $service;
  }

  return NULL;
}
