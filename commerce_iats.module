<?php

/**
 * @file
 * Implements iATS payment services for use in Drupal Commerce.
 */

// TODO: Add request and response logging from commerce_iats_soap_api_request to other methods.

// iATS transaction mode definitions.
define('IATS_TXN_MODE_PRODUCTION', 'production');
define('IATS_TXN_MODE_TEST', 'test');
define('IATS_TXN_OK', 'OK');

// iATS server ID definitions.
define('IATS_NA_SERVER_ID', 'NA');
define('IATS_UK_SERVER_ID', 'UK');

/**
 * Implements hook_libraries_info().
 */
function commerce_iats_libraries_info() {
  $libraries['iatspayments'] = array(
    'name' => 'iATS Payments API',
    'vendor url' => 'http://www.iatspayments.com/',
    'download url' => 'https://github.com/iATSPayments/PHP',
    'version' => '1.0',
    'path' => 'lib',
    'version arguments' => array(
      'file' => 'ProcessLink.php',
      // Version 1.0
      'pattern' => '/\iATS API version ((\d+)\.(\d+))/',
    ),
    'files' => array(
      'php' => array(
        'Core.php',
        'CustomerLink.php',
        'ProcessLink.php',
        'ReportLink.php',
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_menu().
 */
function commerce_iats_menu() {
  $items = array();

  // Add a menu item for refunding transactions.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/iats-credit-card-refund'] = array(
    'title' => 'Refund',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_iats_credit_card_refund_form', 3, 5),
    'access callback' => 'commerce_iats_credit_card_refund_access',
    'access arguments' => array(3, 5),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 2,
    'file' => 'includes/commerce_iats.credit_card.admin.inc',
  );

  return $items;
}

/**
 * Determines access to the refund form for iATS credit card
 * transactions
 *
 * @param $order
 *   The order the transaction is on.
 * @param $transaction
 *   The payment transaction object to be refunded.
 *
 * @return
 *   TRUE or FALSE indicating refund access.
 */
function commerce_iats_refund_access($order, $transaction) {
  if (($transaction->payment_method != 'iats_credit_card')
    || ($transaction->status != 'success')
    || ($transaction->amount <= 0)) {
    return FALSE;
  }

  // Return FALSE if it is more than 120 days past the original capture.
  if (time() - $transaction->created > 86400 * 120) {
    return FALSE;
  }

  // Allow access if the user can update this transaction.
  return commerce_payment_transaction_access('update', $transaction);
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_iats_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['iats_credit_card'] = array(
    'base' => 'commerce_iats_credit_card',
    'title' => t('iATS Webservice: Credit card payment'),
    'short_title' => t('iATS Credit card payment'),
    'display_title' => t('Credit card'),
    'description' => t('Integrates the iATS ProcessLink webservice for credit card payments.'),
    'file' => 'includes/commerce_iats.credit_card.inc',
    'cardonfile' => array(
      'charge callback' => 'commerce_iats_credit_card_cardonfile_charge',
      'update callback' => 'commerce_iats_credit_card_cardonfile_update', // TODO: Write method.
      'delete callback' => 'commerce_iats_credit_card_cardonfile_delete', // TODO: Write method.
    ),
  );

  // TODO: This method also creates customer code. Correct naming scheme?
  $payment_methods['iats_credit_card_validate'] = array(
    'base' => 'commerce_iats_credit_card_validate',
    'title' => t('iATS Webservice: Credit card validation'),
    'short_title' => t('iATS Web Service'),
    'display_title' => t('Credit card validate'),
    'description' => t('Integrates the iATS CustomerLink webservice for credit card validation.'),
    'file' => 'includes/commerce_iats.credit_card_validate.inc',
  );

  return $payment_methods;
}

/**
 * Returns the default settings for the iATS Credit Card and ACH/EFT payment methods.
 */
function commerce_iats_default_settings() {
  return array(
    'agent_code' => '',
    'agent_password' => '',
    'transaction_mode' => IATS_TXN_MODE_TEST,
    'server' => IATS_NA_SERVER_ID,
    'iats_customer_code' => FALSE,
    'log' => array('request' => '0', 'response' => '0'),
  );
}

/**
 * Populate a request with address information for use in a iATS API request.
 *
 * @param $request
 *   Request array
 * @param $order
 *   The order object containing the address information via a referenced
 *   customer profile.
 * @param $field_name
 *   The name of the customer profile reference field that links the order to
 *   the proper customer profile where the address data will be retrieved from.
 */
function commerce_iats_address(array &$request, $order, $field_name) {
  // Return if the specified profile field doesn't exist.
  if (empty($order->{$field_name})) {
    watchdog('commerce_iats', 'Missing address data for @field_name: @order', array('@field_name' => $field_name, '@order' => '<pre>' . check_plain(print_r($order, TRUE)) . '</pre>', WATCHDOG_DEBUG));
    return;
  }

  // Prepare the address data for use in the request address.
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $address_data = $order_wrapper->{$field_name}->commerce_customer_address->value();

  if (empty($address_data['first_name'])) {
    $name_parts = explode(' ', $address_data['name_line']);
    $address_data['first_name'] = array_shift($name_parts);
    $address_data['last_name'] = implode(' ', $name_parts);
  }

  // Add the basic address information to the request
  $request['firstName'] = $address_data['first_name'];
  $request['lastName'] = $address_data['last_name'];
  $request['address'] = $address_data['thoroughfare'];
  $request['city'] = $address_data['locality'];
  $request['state'] = $address_data['administrative_area'];
  $request['zipCode'] = $address_data['postal_code'];
  $request['country'] = $address_data['country'];
  if ($address_data['premise']) {
    $request['address'] .= ', '.$address_data['premise'];
  }

  return TRUE;
}

/**
 * Helper method to get commerce_cardonfile entity from an iATS customer code.
 */
function commerce_iats_cardonfile_customer_code_load($customer_code) {

  $return = array();
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'commerce_cardonfile')
    ->propertyCondition('remote_id', $customer_code);

  $result = $query->execute();

  if (isset($result['commerce_cardonfile'])) {
    return commerce_cardonfile_load(reset(array_keys($result['commerce_cardonfile'])));
  }
  else {
    return FALSE;
  }
}

/**
 * Gets an instance of the iATS Payments API ProcessLink service.
 *
 * @return ProcessLink
 */
function commerce_iats_get_processlink_service($payment_method) {
  if (commerce_iats_load_library()) {
    $service = new iATS\ProcessLink($payment_method['settings']['agent_code'],
      $payment_method['settings']['agent_password'],
      $payment_method['settings']['server']);

    return $service;
  }

  return NULL;
}

/**
 * Gets an instance of the iATS Payments API CustomerLink service.
 *
 * @return CustomerLink
 */
function commerce_iats_get_customerlink_service($payment_method) {
  if (commerce_iats_load_library()) {
    $service = new iATS\CustomerLink($payment_method['settings']['agent_code'],
      $payment_method['settings']['agent_password'],
      $payment_method['settings']['server']);

    return $service;
  }

  return NULL;
}

function commerce_iats_load_library() {
  $library = libraries_load('iatspayments');

  if (!$library['installed']) {
    watchdog('commerce_iats', 'The iATS Payments API could not be loaded: @message', array('@message' => $library['error_message']), WATCHDOG_ERROR);
    drupal_set_message(t($library['error_message']), 'error');
    return FALSE;
  }

  return TRUE;
}