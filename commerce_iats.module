<?php

/**
 * @file
 * Implements iATS Payments API for use in Drupal Commerce.
 */

// iATS response code definitions.
define('COMMERCE_IATS_TXN_OK', 'OK');

// iATS server ID definitions.
define('COMMERCE_IATS_NA_SERVER_ID', 'NA');
define('COMMERCE_IATS_UK_SERVER_ID', 'UK');

/**
 * Implements hook_libraries_info().
 */
function commerce_iats_libraries_info() {
  $libraries['iatspayments'] = array(
    'name' => 'iATS Payments API',
    'vendor url' => 'http://www.iatspayments.com/',
    'download url' => 'https://github.com/iATSPayments/PHP',
    'version' => '1.0',
    'path' => 'lib',
    'version arguments' => array(
      'file' => 'ProcessLink.php',
      // Version 1.0
      'pattern' => '/\iATS API version ((\d+)\.(\d+))/',
    ),
    'files' => array(
      'php' => array(
        'Core.php',
        'CustomerLink.php',
        'ProcessLink.php',
        'ReportLink.php',
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_menu().
 */
function commerce_iats_menu() {
  $items = array();

  // Add a menu item for refunding transactions.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/iats-credit-card-refund'] = array(
    'title' => 'Refund',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_iats_credit_card_refund_form', 3, 5),
    'access callback' => 'commerce_iats_credit_card_refund_access',
    'access arguments' => array(5),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 2,
    'file' => 'includes/commerce_iats.credit_card.admin.inc',
  );

  return $items;
}

/**
 * Determines access to the refund form for iATS credit card transactions.
 *
 * @param object $transaction
 *   The payment transaction object to be refunded.
 *
 * @return bool
 *   TRUE or FALSE indicating refund access.
 */
function commerce_iats_credit_card_refund_access($transaction) {
  if (($transaction->payment_method != 'iats_credit_card')
    || ($transaction->status != 'success')
    || ($transaction->amount <= 0)) {
    return FALSE;
  }

  // Return FALSE if it is more than 120 days past the original capture.
  if (time() - $transaction->created > 86400 * 120) {
    return FALSE;
  }

  // Allow access if the user can update this transaction.
  return commerce_payment_transaction_access('update', $transaction);
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_iats_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['iats_credit_card'] = array(
    'base' => 'commerce_iats_credit_card',
    'title' => t('iATS Webservice: Credit card payment'),
    'short_title' => t('iATS Credit card payment'),
    'display_title' => t('Credit card'),
    'description' => t('Integrates the iATS ProcessLink webservice for credit card payments.'),
    'file' => 'includes/commerce_iats.credit_card.inc',
  );

  $payment_methods['iats_credit_card_customer_code'] = array(
    'base' => 'commerce_iats_credit_card_customer_code',
    'title' => t('iATS Webservice: Credit card customer code creation'),
    'short_title' => t('iATS Web Service'),
    'display_title' => t('Credit card customer code'),
    'description' => t('Integrates the iATS CustomerLink webservice for the creation of credit card customer codes.'),
    'file' => 'includes/commerce_iats.credit_card_customer_code.inc',
  );

  $payment_methods['iats_ach_eft'] = array(
    'base' => 'commerce_iats_ach_eft',
    'title' => t('iATS Webservice: ACH/EFT payment'),
    'short_title' => t('iATS ACH/EFT payment'),
    'display_title' => t('ACH/EFT'),
    'description' => t('Integrates the iATS ProcessLink webservice for ACH/EFT payments.'),
    'file' => 'includes/commerce_iats.ach_eft.inc',
  );

  return $payment_methods;
}

/**
 * Gets base fields settings form fields for all payment methods.
 *
 * @param array $settings
 *   Form field default values array.
 *
 * @return array
 *   Base fields for settings form.
 */
function commerce_iats_settings_form_base(array $settings = NULL) {
  $form = array();

  $form['agent_code'] = array(
    '#type' => 'textfield',
    '#title' => t('Agent Code'),
    '#description' => t('This is the agent code used to authenticate with the iATS website.'),
    '#default_value' => (isset($settings['agent_code'])) ?
    $settings['agent_code'] : '',
    '#required' => TRUE,
  );
  $form['agent_password'] = array(
    '#type' => 'textfield',
    '#title' => t('Password'),
    '#description' => t('Enter the corresponding password for this agent code.'),
    '#default_value' => (isset($settings['agent_password'])) ?
    $settings['agent_password'] : '',
    '#required' => TRUE,
  );
  $form['server'] = array(
    '#type' => 'radios',
    '#title' => t('Transaction Server'),
    '#description' =>
    t('Select the transaction server to use for processing payments.'),
    '#options' => array(
      COMMERCE_IATS_NA_SERVER_ID => t('NA'),
      COMMERCE_IATS_UK_SERVER_ID => t('UK'),
    ),
    '#default_value' => (isset($settings['server'])) ?
    $settings['server'] : COMMERCE_IATS_NA_SERVER_ID,
  );
  $form['log'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Log the following messages for debugging'),
    '#options' => array(
      'request' => t('API request messages'),
      'response' => t('API response messages'),
    ),
    '#default_value' => (isset($settings['log'])) ? $settings['log'] : array(),
  );
  $form['invoice_prefix'] = array(
    '#type' => 'textfield',
    '#title' => t('Invoice Prefix'),
    '#description' => t('Invoice numbers consist of this value followed by the order number. ie. INVOICE-1, INVOICE-2'),
    '#default_value' => (isset($settings['invoice_prefix'])) ?
    $settings['invoice_prefix'] : 'INVOICE-',
    '#required' => TRUE,
  );

  return $form;
}

/**
 * Gets base fields settings form fields for credit card based payment methods.
 *
 * @param array $settings
 *   Form field default values array.
 *
 * @return array
 *   Base fields for settings form.
 */
function commerce_iats_credit_card_settings_form_base(array $settings = NULL) {
  $form = commerce_iats_settings_form_base($settings);

  $form['credit_card'] = array(
    '#type' => 'fieldset',
    '#title' => t('Credit card service settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['credit_card']['card_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Limit accepted credit cards to the following types'),
    '#description' => t('If none are checked, any credit card type will be accepted.'),
    '#options' => commerce_iats_credit_card_types(),
    '#default_value' => isset($settings['credit_card']['card_types']) ? $settings['credit_card']['card_types'] : array(),
  );

  return $form;
}

/**
 * Processes a payment and creates a transaction record.
 *
 * Based on the response from the iATS API.
 *
 * @param array $payment_method
 *   Associative array with the payment method details.
 * @param array $payment_data
 *   Associative array with the payment data.
 * @param object $order
 *   Commerce order object.
 * @param object $charge
 *   Commerce charge object.
 * @param string $payment_callback
 *   Name of the payment callback.
 *
 * @return bool
 *   TRUE or FALSE indicating payment success.
 */
function commerce_iats_process_payment($payment_method, $payment_data, $order, $charge, $payment_callback) {
  // Process the payment using the defined callback method.
  $response = $payment_callback($payment_method, $payment_data, $order, $charge);

  // Handle the payment response.
  if ($response != NULL) {
    // Log the payment response.
    if ($payment_method['settings']['log']['response'] === 'response') {
      commerce_iats_log_response($payment_method, $response);
    }

    $auth_result = (isset($response['AUTHORIZATIONRESULT'])) ?
      trim($response['AUTHORIZATIONRESULT']) : NULL;
    $transaction_id = (isset($response['TRANSACTIONID'])) ?
      trim($response['TRANSACTIONID']) : NULL;
    $customer_code = (isset($response['CUSTOMERCODE']) &&
      !empty($response['CUSTOMERCODE'])) ?
      trim($response['CUSTOMERCODE']) : NULL;

    // If AUTHORIZATIONRESULT is not set, then the API returned an error string.
    // Assign it here for logging purposes.
    if ($auth_result == NULL) {
      $auth_result = $response;
    }

    // Build the remote ID from the transaction ID and customer code.
    $remote_id = $transaction_id;
    if ($customer_code != NULL) {
      $remote_id .= '|' . $customer_code;
    }

    // Prepare a transaction object to log the API response.
    $transaction = commerce_payment_transaction_new('iats_credit_card', $order->order_id);
    $transaction->instance_id = $payment_method['instance_id'];
    $transaction->remote_id = $remote_id;
    $transaction->amount = $charge['amount'];
    $transaction->currency_code = $charge['currency_code'];

    if (substr($auth_result, 0, 2) != COMMERCE_IATS_TXN_OK) {
      // Create a failed transaction with the error message.
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
    }
    else {
      $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
    }

    // Build a meaningful response message.
    $message = array(
      '<b>' . t('iATS Payments result from @payment_callback',
        array('@payment_callback' => $payment_callback)) . '</b>',
      '<b>' . t('@decision', array('@decision' => $auth_result)) . '</b>',
    );

    $transaction->message = implode('<br />', $message);

    // Save the transaction information.
    commerce_payment_transaction_save($transaction);

    // If the payment failed, display an error and rebuild the form.
    if (substr($auth_result, 0, 2) != COMMERCE_IATS_TXN_OK) {
      drupal_set_message(
        t('We received the following error while attempting to process your payment: @reason',
          array('@reason' => $auth_result)),
        'error'
      );
      return FALSE;
    }
  }
  else {
    drupal_set_message(
      t('We encountered an error contacting our payment processor. Please try submitting your payment again.'),
      'error'
    );
    return FALSE;
  }
  return TRUE;
}

/**
 * Logs an API request.
 *
 * @param array $payment_method
 *   The payment method used during this transaction.
 * @param string $payment_callback
 *   The name of the payment callback method used for this request.
 * @param array $request
 *   The API request to log.
 */
function commerce_iats_log_request(array $payment_method, $payment_callback, array $request) {
  if (isset($request['ccNum'])) {
    $request['ccNum'] = commerce_iats_mask_credit_card_number($request['ccNum']);
  }
  elseif (isset($request['creditCardNum'])) {
    $request['creditCardNum'] = commerce_iats_mask_credit_card_number($request['creditCardNum']);
  }

  if (isset($request['cvv2']) && !empty($request['cvv2'])) {
    $request['cvv2'] = str_repeat('X', strlen($request['cvv2']));
  }

  watchdog('commerce_iats', 'iATS API request to @method: @callback: @request',
    array(
      '@method' => $payment_method['short_title'],
      '@callback' => $payment_callback,
      '@request' => '<pre>' . check_plain(print_r($request, TRUE)) . '</pre>',
    ),
    WATCHDOG_DEBUG);
}

/**
 * Logs an API response.
 *
 * @param array $payment_method
 *   The payment method used during this transaction.
 * @param mixed $response
 *   Response array or error string.
 */
function commerce_iats_log_response(array $payment_method, $response) {
  watchdog('commerce_iats',
    'iATS API response from @method: @request',
    array(
      '@method' => $payment_method['short_title'],
      '@request' => '<pre>' . check_plain(print_r($response, TRUE)) . '</pre>',
    ),
    WATCHDOG_DEBUG);
}

/**
 * Define credit card types accepted by iATS.
 *
 * Array keys must match keys in Commerce module file
 *  commerce_payment.credit_card.inc:commerce_payment_credit_card_types
 *
 * The method commerce_payment_credit_card_form uses array_intersect_key
 * to validate keys in this array, making any custom keys invalid.
 *
 * @return array
 *   Array of credit card types.
 */
function commerce_iats_credit_card_types() {
  return array(
    'visa' => t('Visa'),
    'mastercard' => t('MasterCard'),
    'amex' => t('American Express'),
    'discover' => t('Discover Card'),
  );
}

/**
 * Converts a Commerce credit card type to an iATS-compatible credit card type.
 *
 * This conversion method is used to allow for custom credit card types.
 * See comment block of commerce_iats_credit_card_types for explanation.
 *
 * @param string $type
 *   The Commerce credit card type.
 *
 * @return string
 *   The iATS credit card type.
 */
function commerce_iats_credit_card_mop($type) {
  $mop = array(
    'visa' => 'VISA',
    'mastercard' => 'MC',
    'amex' => 'AMX',
    'discover' => 'DSC',
  );
  return $mop[$type];
}

/**
 * Gets an array of enabled card types for a payment method.
 *
 * @param array $payment_method
 *   The payment method used during this transaction.
 *
 * @return array
 *   Array of enabled card type IDs ie. visa, mc
 */
function commerce_iats_enabled_credit_card_types(array $payment_method) {
  $card_types = NULL;

  if (isset($payment_method['settings']['credit_card'])) {
    $card_types = array_diff(
      array_values($payment_method['settings']['credit_card']['card_types']), array(0));
  }

  if (($card_types == NULL) || (count($card_types) == 0)) {
    $card_types = array_keys(commerce_iats_credit_card_types());
  }

  return $card_types;
}

/**
 * Masks all but the last four digits of a credit card number.
 *
 * @param string $credit_card_number
 *   Unmasked credit card number.
 *
 * @return string
 *   Masked credit card number.
 */
function commerce_iats_mask_credit_card_number($credit_card_number) {
  return str_repeat('X', strlen($credit_card_number) - 4) . substr($credit_card_number, -4);
}

/**
 * Formats an array of credit card data in a way appropriate for iATS.
 *
 * @param array $card_data
 *   Unformatted credit card data from form
 *
 * @return array
 *   Formatted credit card data.
 */
function commerce_iats_format_credit_card_data(array $card_data) {
  // Determine card type.
  $orig_card_type = NULL;
  $card_type = NULL;
  if (!empty($card_data['number'])) {
    module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
    $orig_card_type = commerce_payment_validate_credit_card_type($card_data['number'], array_keys(commerce_iats_credit_card_types()));
  }

  if ($orig_card_type != NULL) {
    $card_type = commerce_iats_credit_card_mop($orig_card_type);
  }

  // Format credit card data.
  $card_number = str_replace(' ', '', $card_data['number']);
  $expiry = sprintf('%02d/%02d', $card_data['exp_month'], ($card_data['exp_year'] % 100));

  $formatted_card_data = array(
    'orig_type' => $orig_card_type,
    'type' => $card_type,
    'number' => $card_number,
    'expiry' => $expiry,
  );

  return $formatted_card_data;
}

/**
 * Populate a request with address information for use in a iATS API request.
 *
 * @param array $request
 *   Request array
 * @param object $order
 *   The order object containing the address information via a referenced
 *   customer profile.
 * @param string $field_name
 *   The name of the customer profile reference field that links the order to
 *   the proper customer profile where the address data will be retrieved from.
 *
 * @return mixed
 *   Updates pass by reference.
 */
function commerce_iats_address(array &$request, $order, $field_name) {
  // Return if the specified profile field doesn't exist.
  if (empty($order->{$field_name})) {
    watchdog('commerce_iats', 'Missing address data for @field_name: @order',
      array(
        '@field_name' => $field_name,
        '@order' => '<pre>' . print_r($order, TRUE) . '</pre>',
      ),
      WATCHDOG_DEBUG
    );

    return FALSE;
  }

  // Prepare the address data for use in the request address.
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $address_data = $order_wrapper->{$field_name}->commerce_customer_address->value();

  // If the address is missing a first name, split the
  // full name into two parts as a backup.
  if (empty($address_data['first_name'])) {
    $name_parts = explode(' ', $address_data['name_line']);
    $address_data['first_name'] = array_shift($name_parts);
    $address_data['last_name'] = implode(' ', $name_parts);
  }

  // Add the basic address information to the request.
  $request['firstName'] = $address_data['first_name'];
  $request['lastName'] = $address_data['last_name'];
  $request['address'] = $address_data['thoroughfare'];
  $request['city'] = $address_data['locality'];
  $request['state'] = $address_data['administrative_area'];
  $request['zipCode'] = $address_data['postal_code'];
  $request['country'] = $address_data['country'];
  if ($address_data['premise']) {
    $request['address'] .= ', ' . $address_data['premise'];
  }

  return TRUE;
}

/**
 * Gets an instance of an iATS Payments API service.
 *
 * @param string $service_name
 *   The iATS service to get. 'ProcessLink' or 'CustomerLink'
 * @param array $payment_method
 *   The payment method, used to populate iATS API settings.
 *
 * @return Mixed
 *   The instantiated iATS Payments API service.
 */
function commerce_iats_get_service($service_name, array $payment_method) {
  if (libraries_load('iatspayments')) {
    $service_name = 'iATS\\' . $service_name;
    $service = new $service_name(
      $payment_method['settings']['agent_code'],
      $payment_method['settings']['agent_password'],
      $payment_method['settings']['server']
    );
    return $service;
  }
  return NULL;
}
